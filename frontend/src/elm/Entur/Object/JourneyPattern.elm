-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entur.Object.JourneyPattern exposing (ServiceJourneysForDateOptionalArguments, destinationDisplay, directionType, id, line, name, notices, pointsOnLink, quays, selection, serviceJourneys, serviceJourneysForDate, situations)

import Entur.Enum.DirectionType
import Entur.InputObject
import Entur.Interface
import Entur.Object
import Entur.Scalar
import Entur.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Entur.Object.JourneyPattern
selection constructor =
    Object.selection constructor


id : Field Entur.Scalar.Id Entur.Object.JourneyPattern
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Entur.Scalar.Id)


line : SelectionSet decodesTo Entur.Object.Line -> Field decodesTo Entur.Object.JourneyPattern
line object_ =
    Object.selectionField "line" [] object_ identity


directionType : Field (Maybe Entur.Enum.DirectionType.DirectionType) Entur.Object.JourneyPattern
directionType =
    Object.fieldDecoder "directionType" [] (Entur.Enum.DirectionType.decoder |> Decode.nullable)


name : Field (Maybe String) Entur.Object.JourneyPattern
name =
    Object.fieldDecoder "name" [] (Decode.string |> Decode.nullable)


destinationDisplay : SelectionSet decodesTo Entur.Object.DestinationDisplay -> Field (Maybe decodesTo) Entur.Object.JourneyPattern
destinationDisplay object_ =
    Object.selectionField "destinationDisplay" [] object_ (identity >> Decode.nullable)


serviceJourneys : SelectionSet decodesTo Entur.Object.ServiceJourney -> Field (List decodesTo) Entur.Object.JourneyPattern
serviceJourneys object_ =
    Object.selectionField "serviceJourneys" [] object_ (identity >> Decode.list)


type alias ServiceJourneysForDateOptionalArguments =
    { date : OptionalArgument Entur.Scalar.Date }


{-| List of service journeys for the journey pattern for a given date
-}
serviceJourneysForDate : (ServiceJourneysForDateOptionalArguments -> ServiceJourneysForDateOptionalArguments) -> SelectionSet decodesTo Entur.Object.ServiceJourney -> Field (List decodesTo) Entur.Object.JourneyPattern
serviceJourneysForDate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { date = Absent }

        optionalArgs =
            [ Argument.optional "date" filledInOptionals.date (\(Entur.Scalar.Date raw) -> Encode.string raw) ]
                |> List.filterMap identity
    in
    Object.selectionField "serviceJourneysForDate" optionalArgs object_ (identity >> Decode.list)


{-| Quays visited by service journeys for this journey patterns
-}
quays : SelectionSet decodesTo Entur.Object.Quay -> Field (List decodesTo) Entur.Object.JourneyPattern
quays object_ =
    Object.selectionField "quays" [] object_ (identity >> Decode.list)


pointsOnLink : SelectionSet decodesTo Entur.Object.PointsOnLink -> Field (Maybe decodesTo) Entur.Object.JourneyPattern
pointsOnLink object_ =
    Object.selectionField "pointsOnLink" [] object_ (identity >> Decode.nullable)


{-| Get all situations active for the journey pattern
-}
situations : SelectionSet decodesTo Entur.Object.PtSituationElement -> Field (List (Maybe decodesTo)) Entur.Object.JourneyPattern
situations object_ =
    Object.selectionField "situations" [] object_ (identity >> Decode.nullable >> Decode.list)


notices : SelectionSet decodesTo Entur.Object.Notice -> Field (List (Maybe decodesTo)) Entur.Object.JourneyPattern
notices object_ =
    Object.selectionField "notices" [] object_ (identity >> Decode.nullable >> Decode.list)
