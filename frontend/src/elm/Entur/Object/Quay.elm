-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entur.Object.Quay exposing (EstimatedCallsOptionalArguments, description, estimatedCalls, id, journeyPatterns, latitude, lines, longitude, name, publicCode, selection, situations, stopPlace, timezone, wheelchairAccessible)

import Entur.Enum.WheelchairBoarding
import Entur.InputObject
import Entur.Interface
import Entur.Object
import Entur.Scalar
import Entur.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Entur.Object.Quay
selection constructor =
    Object.selection constructor


id : Field Entur.Scalar.Id Entur.Object.Quay
id =
    Object.fieldDecoder "id" [] (Object.scalarDecoder |> Decode.map Entur.Scalar.Id)


name : Field String Entur.Object.Quay
name =
    Object.fieldDecoder "name" [] Decode.string


latitude : Field (Maybe Float) Entur.Object.Quay
latitude =
    Object.fieldDecoder "latitude" [] (Decode.float |> Decode.nullable)


longitude : Field (Maybe Float) Entur.Object.Quay
longitude =
    Object.fieldDecoder "longitude" [] (Decode.float |> Decode.nullable)


description : Field (Maybe String) Entur.Object.Quay
description =
    Object.fieldDecoder "description" [] (Decode.string |> Decode.nullable)


{-| The stop place to which this quay belongs to.
-}
stopPlace : SelectionSet decodesTo Entur.Object.StopPlace -> Field (Maybe decodesTo) Entur.Object.Quay
stopPlace object_ =
    Object.selectionField "stopPlace" [] object_ (identity >> Decode.nullable)


{-| Whether this quay is suitable for wheelchair boarding.
-}
wheelchairAccessible : Field (Maybe Entur.Enum.WheelchairBoarding.WheelchairBoarding) Entur.Object.Quay
wheelchairAccessible =
    Object.fieldDecoder "wheelchairAccessible" [] (Entur.Enum.WheelchairBoarding.decoder |> Decode.nullable)


timezone : Field String Entur.Object.Quay
timezone =
    Object.fieldDecoder "timezone" [] Decode.string


{-| Public code used to identify this quay within the stop place. For instance a platform code.
-}
publicCode : Field (Maybe String) Entur.Object.Quay
publicCode =
    Object.fieldDecoder "publicCode" [] (Decode.string |> Decode.nullable)


{-| List of lines servicing this quay
-}
lines : SelectionSet decodesTo Entur.Object.Line -> Field (List decodesTo) Entur.Object.Quay
lines object_ =
    Object.selectionField "lines" [] object_ (identity >> Decode.list)


{-| List of journey patterns servicing this quay
-}
journeyPatterns : SelectionSet decodesTo Entur.Object.JourneyPattern -> Field (List (Maybe decodesTo)) Entur.Object.Quay
journeyPatterns object_ =
    Object.selectionField "journeyPatterns" [] object_ (identity >> Decode.nullable >> Decode.list)


type alias EstimatedCallsOptionalArguments =
    { startTime : OptionalArgument Entur.Scalar.DateTime, timeRange : OptionalArgument Int, numberOfDepartures : OptionalArgument Int, numberOfDeparturesPerLineAndDestinationDisplay : OptionalArgument Int, omitNonBoarding : OptionalArgument Bool, whiteListed : OptionalArgument Entur.InputObject.InputWhiteListed }


{-| List of visits to this quay as part of vehicle journeys.

  - startTime - DateTime for when to fetch estimated calls from. Default value is current time
  - numberOfDepartures - Limit the total number of departures returned.
  - numberOfDeparturesPerLineAndDestinationDisplay - Limit the number of departures per line and destination display returned. The parameter is only applied when the value is between 1 and 'numberOfDepartures'.
  - whiteListed - Parameters for indicating the only authorities and/or lines or quays to list estimatedCalls for

-}
estimatedCalls : (EstimatedCallsOptionalArguments -> EstimatedCallsOptionalArguments) -> SelectionSet decodesTo Entur.Object.EstimatedCall -> Field (List (Maybe decodesTo)) Entur.Object.Quay
estimatedCalls fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { startTime = Absent, timeRange = Absent, numberOfDepartures = Absent, numberOfDeparturesPerLineAndDestinationDisplay = Absent, omitNonBoarding = Absent, whiteListed = Absent }

        optionalArgs =
            [ Argument.optional "startTime" filledInOptionals.startTime (\(Entur.Scalar.DateTime raw) -> Encode.string raw), Argument.optional "timeRange" filledInOptionals.timeRange Encode.int, Argument.optional "numberOfDepartures" filledInOptionals.numberOfDepartures Encode.int, Argument.optional "numberOfDeparturesPerLineAndDestinationDisplay" filledInOptionals.numberOfDeparturesPerLineAndDestinationDisplay Encode.int, Argument.optional "omitNonBoarding" filledInOptionals.omitNonBoarding Encode.bool, Argument.optional "whiteListed" filledInOptionals.whiteListed Entur.InputObject.encodeInputWhiteListed ]
                |> List.filterMap identity
    in
    Object.selectionField "estimatedCalls" optionalArgs object_ (identity >> Decode.nullable >> Decode.list)


{-| Get all situations active for the quay
-}
situations : SelectionSet decodesTo Entur.Object.PtSituationElement -> Field (List (Maybe decodesTo)) Entur.Object.Quay
situations object_ =
    Object.selectionField "situations" [] object_ (identity >> Decode.nullable >> Decode.list)
