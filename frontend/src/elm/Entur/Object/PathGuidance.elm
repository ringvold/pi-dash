-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entur.Object.PathGuidance exposing (LegStepTextOptionalArguments, area, bogusName, distance, exit, heading, latitude, legStepText, longitude, relativeDirection, selection, stayOn, streetName)

import Entur.Enum.AbsoluteDirection
import Entur.Enum.Locale
import Entur.Enum.RelativeDirection
import Entur.InputObject
import Entur.Interface
import Entur.Object
import Entur.Scalar
import Entur.Union
import Graphql.Field as Field exposing (Field)
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) Entur.Object.PathGuidance
selection constructor =
    Object.selection constructor


{-| The distance in meters that this step takes.
-}
distance : Field (Maybe Float) Entur.Object.PathGuidance
distance =
    Object.fieldDecoder "distance" [] (Decode.float |> Decode.nullable)


{-| The relative direction of this step.
-}
relativeDirection : Field (Maybe Entur.Enum.RelativeDirection.RelativeDirection) Entur.Object.PathGuidance
relativeDirection =
    Object.fieldDecoder "relativeDirection" [] (Entur.Enum.RelativeDirection.decoder |> Decode.nullable)


{-| The name of the street.
-}
streetName : Field (Maybe String) Entur.Object.PathGuidance
streetName =
    Object.fieldDecoder "streetName" [] (Decode.string |> Decode.nullable)


{-| The absolute direction of this step.
-}
heading : Field (Maybe Entur.Enum.AbsoluteDirection.AbsoluteDirection) Entur.Object.PathGuidance
heading =
    Object.fieldDecoder "heading" [] (Entur.Enum.AbsoluteDirection.decoder |> Decode.nullable)


{-| When exiting a highway or traffic circle, the exit name/number.
-}
exit : Field (Maybe String) Entur.Object.PathGuidance
exit =
    Object.fieldDecoder "exit" [] (Decode.string |> Decode.nullable)


{-| Indicates whether or not a street changes direction at an intersection.
-}
stayOn : Field (Maybe Bool) Entur.Object.PathGuidance
stayOn =
    Object.fieldDecoder "stayOn" [] (Decode.bool |> Decode.nullable)


{-| This step is on an open area, such as a plaza or train platform, and thus the directions should say something like "cross"
-}
area : Field (Maybe Bool) Entur.Object.PathGuidance
area =
    Object.fieldDecoder "area" [] (Decode.bool |> Decode.nullable)


{-| The name of this street was generated by the system, so we should only display it once, and generally just display right/left directions
-}
bogusName : Field (Maybe Bool) Entur.Object.PathGuidance
bogusName =
    Object.fieldDecoder "bogusName" [] (Decode.bool |> Decode.nullable)


{-| The latitude of the step.
-}
latitude : Field (Maybe Float) Entur.Object.PathGuidance
latitude =
    Object.fieldDecoder "latitude" [] (Decode.float |> Decode.nullable)


{-| The longitude of the step.
-}
longitude : Field (Maybe Float) Entur.Object.PathGuidance
longitude =
    Object.fieldDecoder "longitude" [] (Decode.float |> Decode.nullable)


type alias LegStepTextOptionalArguments =
    { locale : OptionalArgument Entur.Enum.Locale.Locale }


{-| Direction information as readable text.
-}
legStepText : (LegStepTextOptionalArguments -> LegStepTextOptionalArguments) -> Field (Maybe String) Entur.Object.PathGuidance
legStepText fillInOptionals =
    let
        filledInOptionals =
            fillInOptionals { locale = Absent }

        optionalArgs =
            [ Argument.optional "locale" filledInOptionals.locale (Encode.enum Entur.Enum.Locale.toString) ]
                |> List.filterMap identity
    in
    Object.fieldDecoder "legStepText" optionalArgs (Decode.string |> Decode.nullable)
