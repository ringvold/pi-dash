-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entur.Enum.AbsoluteDirection exposing (AbsoluteDirection(..), decoder, toString)

import Json.Decode as Decode exposing (Decoder)


type AbsoluteDirection
    = North
    | Northeast
    | East
    | Southeast
    | South
    | Southwest
    | West
    | Northwest


decoder : Decoder AbsoluteDirection
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "north" ->
                        Decode.succeed North

                    "northeast" ->
                        Decode.succeed Northeast

                    "east" ->
                        Decode.succeed East

                    "southeast" ->
                        Decode.succeed Southeast

                    "south" ->
                        Decode.succeed South

                    "southwest" ->
                        Decode.succeed Southwest

                    "west" ->
                        Decode.succeed West

                    "northwest" ->
                        Decode.succeed Northwest

                    _ ->
                        Decode.fail ("Invalid AbsoluteDirection type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : AbsoluteDirection -> String
toString enum =
    case enum of
        North ->
            "north"

        Northeast ->
            "northeast"

        East ->
            "east"

        Southeast ->
            "southeast"

        South ->
            "south"

        Southwest ->
            "southwest"

        West ->
            "west"

        Northwest ->
            "northwest"
