-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Entur.Enum.OptimisationMethod exposing (OptimisationMethod(..), decoder, toString)

import Json.Decode as Decode exposing (Decoder)


type OptimisationMethod
    = Quick
    | Safe
    | Flat
    | Greenways
    | Triangle
    | Transfers


decoder : Decoder OptimisationMethod
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "quick" ->
                        Decode.succeed Quick

                    "safe" ->
                        Decode.succeed Safe

                    "flat" ->
                        Decode.succeed Flat

                    "greenways" ->
                        Decode.succeed Greenways

                    "triangle" ->
                        Decode.succeed Triangle

                    "transfers" ->
                        Decode.succeed Transfers

                    _ ->
                        Decode.fail ("Invalid OptimisationMethod type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : OptimisationMethod -> String
toString enum =
    case enum of
        Quick ->
            "quick"

        Safe ->
            "safe"

        Flat ->
            "flat"

        Greenways ->
            "greenways"

        Triangle ->
            "triangle"

        Transfers ->
            "transfers"
