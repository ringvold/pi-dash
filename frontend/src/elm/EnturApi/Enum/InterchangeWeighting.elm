-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.InterchangeWeighting exposing (InterchangeWeighting(..), decoder, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - PreferredInterchange - Highest priority interchange.
  - RecommendedInterchange - Second highest priority interchange.
  - InterchangeAllowed - Third highest priority interchange.
  - NoInterchange - Interchange not allowed.

-}
type InterchangeWeighting
    = PreferredInterchange
    | RecommendedInterchange
    | InterchangeAllowed
    | NoInterchange


decoder : Decoder InterchangeWeighting
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "preferredInterchange" ->
                        Decode.succeed PreferredInterchange

                    "recommendedInterchange" ->
                        Decode.succeed RecommendedInterchange

                    "interchangeAllowed" ->
                        Decode.succeed InterchangeAllowed

                    "noInterchange" ->
                        Decode.succeed NoInterchange

                    _ ->
                        Decode.fail ("Invalid InterchangeWeighting type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : InterchangeWeighting -> String
toString enum =
    case enum of
        PreferredInterchange ->
            "preferredInterchange"

        RecommendedInterchange ->
            "recommendedInterchange"

        InterchangeAllowed ->
            "interchangeAllowed"

        NoInterchange ->
            "noInterchange"
