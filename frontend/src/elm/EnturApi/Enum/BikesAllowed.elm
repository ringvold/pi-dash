-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.BikesAllowed exposing (BikesAllowed(..), decoder, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - NoInformation - There is no bike information for the trip.
  - Allowed - The vehicle being used on this particular trip can accommodate at least one bicycle.
  - NotAllowed - No bicycles are allowed on this trip.

-}
type BikesAllowed
    = NoInformation
    | Allowed
    | NotAllowed


decoder : Decoder BikesAllowed
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "noInformation" ->
                        Decode.succeed NoInformation

                    "allowed" ->
                        Decode.succeed Allowed

                    "notAllowed" ->
                        Decode.succeed NotAllowed

                    _ ->
                        Decode.fail ("Invalid BikesAllowed type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : BikesAllowed -> String
toString enum =
    case enum of
        NoInformation ->
            "noInformation"

        Allowed ->
            "allowed"

        NotAllowed ->
            "notAllowed"
