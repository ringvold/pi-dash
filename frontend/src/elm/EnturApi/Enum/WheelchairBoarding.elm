-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module EnturApi.Enum.WheelchairBoarding exposing (WheelchairBoarding(..), decoder, toString)

import Json.Decode as Decode exposing (Decoder)


{-|

  - NoInformation - There is no accessibility information for the stopPlace/quay.
  - Possible - Boarding wheelchair-accessible serviceJourneys is possible at this stopPlace/quay.
  - NotPossible - Wheelchair boarding/alighting is not possible at this stop.

-}
type WheelchairBoarding
    = NoInformation
    | Possible
    | NotPossible


decoder : Decoder WheelchairBoarding
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "noInformation" ->
                        Decode.succeed NoInformation

                    "possible" ->
                        Decode.succeed Possible

                    "notPossible" ->
                        Decode.succeed NotPossible

                    _ ->
                        Decode.fail ("Invalid WheelchairBoarding type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representating the Enum to a string that the GraphQL server will recognize.
-}
toString : WheelchairBoarding -> String
toString enum =
    case enum of
        NoInformation ->
            "noInformation"

        Possible ->
            "possible"

        NotPossible ->
            "notPossible"
